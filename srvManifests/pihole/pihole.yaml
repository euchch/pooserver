apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "pihole"
  namespace: "pihole"
  labels:
    app.kubernetes.io/name: pihole
    app: pihole
spec:
  serviceName: pihole
  # Practically kills UI but if update fails for some reason - the old "green" server will still work
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: pihole
      app: pihole
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pihole
        app: pihole
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - pihole
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: "pihole"
          image: "pihole/pihole:2022.07"
          imagePullPolicy: Always
          ports:
            - containerPort: 53
              protocol: "UDP"
            - containerPort: 53
              protocol: "TCP"
            - containerPort: 67
              protocol: "UDP"
            - containerPort: 80
              protocol: "TCP"
            - containerPort: 443
              protocol: "TCP"
          env:
            - name:   "TZ"
              valueFrom:
                configMapKeyRef:
                  name: pihole-config
                  key: TZ
            - name:   "WEBPASSWORD"
              valueFrom:
                configMapKeyRef:
                  name: pihole-config
                  key: WEBPASSWORD
            - name:   "DNS1"
              valueFrom:
                configMapKeyRef:
                  name: pihole-config
                  key: DNS1
            - name:   "DNS2"
              valueFrom:
                configMapKeyRef:
                  name: pihole-config
                  key: DNS2
            - name:   "VIRTUAL_HOST"
              value:  "pi.hole"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "1"
          volumeMounts:
            - name: pihole-etc
              mountPath: '/etc/pihole'
            - name: pihole-dnsmasq
              mountPath: '/etc/dnsmasq.d'
            - name: "pihole-bootstrap"
              mountPath: "/bootstrap"
              readOnly: true
          livenessProbe:
            exec:
              # Not the BEST way to test it but since jq is not on image, cannot use "pihole -c -j" for actual data
              command:
                  - bash
                  - -c
                  - "/bootstrap/livecheck.sh"
            initialDelaySeconds: 30
            timeoutSeconds: 2
          readinessProbe:
            exec:
              # Not the BEST way to test it but since jq is not on image, cannot use "pihole -c -j" for actual data
              command:
                  - bash
                  - -c
                  - "/bootstrap/healthcheck.sh"
            # DB startup update (postStart script) waits 30s, this one needs to be longer 
            # to allow it to finish before allowing requests - might need to migrate to PID test but I'm lazy :)
            initialDelaySeconds: 60
            timeoutSeconds: 2
          lifecycle:
            postStart:
              exec:
                command: 
                  - "/bin/bash"
                  - "-c"
                  - "/bootstrap/update-lists.sh > /tmp/startup.log"
      volumes:
        - name: "pihole-bootstrap"
          configMap:
            name: pihole-bootstrap
            defaultMode: 0777
  volumeClaimTemplates:
    - metadata:
        name: pihole-etc
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 500Mi
    - metadata:
        name: pihole-dnsmasq
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 100Mi
